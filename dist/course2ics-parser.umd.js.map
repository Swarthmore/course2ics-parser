{"version":3,"file":"course2ics-parser.umd.js","sources":["../src/index.js"],"sourcesContent":["const { RRule } = require('rrule')\r\nconst fs = require('fs').promises\r\nconst Papa = require('papaparse')\r\nconst ics = require('ics')\r\nconst moment = require('moment')\r\nconst { validateArgs, validateRow } = require('./validators')\r\nconst { daysFromString, timeDiff, firstDayAfterDate, flipName } = require('./helpers')\r\nconst path = require('path')\r\n\r\n// readCsvFunction -> papaParseCsv -> for each row, create an ics file -> if processed successfully, add row and filepath to index json -> once all rows are processed, resolve a promise with the index json and output directory\r\n\r\n// See: https://momentjs.com/docs/#/use-it/node-js/\r\nmoment().format()\r\n\r\n// See: https://github.com/moment/moment/issues/3488\r\nmoment.suppressDeprecationWarnings = true;\r\n\r\n/**\r\n * Parses a csv and creates an ics file for each row. The generated ics will contain events recurring weekly from\r\n * the given fromDate until the given toDate.\r\n *  \r\n * @param {Object}  argv - The function arguments\r\n * @param {boolean} argv.verbose - Runs the function in verbose mode\r\n * @param {string}  argv.outputDir - The directory to save the files to. This directory must exist.\r\n * @param {string}  argv.inputFile - The input csv\r\n * @param {string}  argv.toDate - The starting date\r\n * @param {string}  argv.fromDate - The end date\r\n * \r\n * @returns {Promise<void>}\r\n */\r\n\r\nasync function parse(argv) {\r\n\r\n  /**\r\n   * Output a debug message. This will only work if --verbose is passed to the script\r\n   * @param {string} message - The message to output \r\n   * @returns void\r\n   */\r\n  const debugMessage = (message) => {\r\n    if (!argv.verbose) return\r\n    console.debug(\r\n      typeof message === 'string' ? message : JSON.stringify(message)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Reads a CSV file from disk\r\n   * @param {string} filepath - The path to the csv\r\n   * @returns {Promise<string>} - The contents of the file\r\n   */\r\n  async function readCsv(filepath) {\r\n    try {\r\n      return await fs.readFile(filepath, 'utf8')\r\n    } catch (e) {\r\n      return e\r\n    }\r\n  }\r\n \r\n  /**\r\n   * Creates an ics event\r\n   * \r\n   * @param {Object} args - The function arguments\r\n   * @param {string} args.subject\r\n   * @param {string} args.course\r\n   * @param {string} args.section\r\n   * @param {string} args.instructor\r\n   * @param {string} args.email\r\n   * @param {string} args.days\r\n   * @param {string} args.times\r\n   * @param {string} args.fromDate\r\n   * @param {string} args.toDate \r\n   * \r\n   * @returns {Promise<string>} - Returns a promise that resolves with the ICS event\r\n   */\r\n  async function createIcsEvent({ title, subject, course, section, instructor, email, days, times, fromDate, toDate }) {\r\n\r\n    const daysArr = daysFromString(days)\r\n\r\n    const rrule = new RRule({\r\n      freq: RRule.WEEKLY,\r\n      byweekday: daysArr.map(day => {\r\n        switch (day) {\r\n          case 'U':\r\n            return RRule.SU\r\n          case 'M':\r\n            return RRule.MO\r\n          case 'T':\r\n            return RRule.TU\r\n          case 'W':\r\n            return RRule.WE\r\n          case 'R':\r\n            return RRule.TH\r\n          case 'F':\r\n            return RRule.FR\r\n          case 'S':\r\n            return RRule.SA\r\n          default:\r\n            break\r\n        }\r\n      }).filter(day => day),\r\n      until: new Date(toDate)\r\n    })\r\n\r\n    const firstDay = firstDayAfterDate(fromDate, days, times, moment)\r\n\r\n    const start = firstDay.format('YYYY-M-D-H-m').split(\"-\")\r\n\r\n    const duration = timeDiff(times)\r\n\r\n      // rrule.toString() will include the beginning RRULE:\r\n      // This is not needed with the ics library\r\n      // This line of code splits the returned rrule string at RRULE: and assigns the\r\n      // second part (the part we need) to a variable.\r\n      const [, recurrenceRule] = rrule.toString().split('RRULE:')\r\n\r\n      const eventTitle = `${subject} ${course} ${section}`\r\n\r\n      const event = {\r\n        // Start is in the format [year, month, day, hour, min]\r\n        start: start,\r\n        duration: duration,\r\n        recurrenceRule: recurrenceRule,\r\n        title: eventTitle,\r\n        description: title,\r\n        status: 'CONFIRMED',\r\n        organizer: {\r\n          name: flipName(instructor),\r\n          email: email\r\n        }\r\n      }\r\n\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      ics.createEvent(event, (err, val) => {\r\n        if (err) reject(err)\r\n        resolve(val)\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n /**\r\n  * Writes an ics file to disk\r\n  * @param {string} icsData - The generated ics data \r\n  * @param {string} fileName - The full file name to save\r\n  * @returns {Promise<string>} - Returns a promise that will resolve with the created filename\r\n  */ \r\n  async function writeIcsToDisk(icsData, fileName) {\r\n    try {\r\n      await fs.writeFile(fileName, icsData)\r\n      return fileName\r\n    } catch (e) {\r\n      return e\r\n    }\r\n  }\r\n\r\n  // Validate the arguments\r\n  const args = await validateArgs(argv)\r\n\r\n  // Set the output directory based on the arguments provided\r\n  const outputDir = path.normalize(args.outputDir)\r\n\r\n  // Read the CSV\r\n  const csv = await readCsv(path.normalize(args.inputFile))\r\n\r\n  // Use the papa to parse the file 🍕\r\n  Papa.parse(csv, {\r\n\r\n    complete: async (results) => {\r\n\r\n      // keep track of the created files, along with the source row\r\n      let created = []\r\n\r\n      // Get the rows from papa parse\r\n      const rows = results.data.slice(1)\r\n      let i = 0\r\n\r\n      for await (let r of rows) {\r\n\r\n        try {\r\n          debugMessage('-------------------------------------------')\r\n          debugMessage(`Processing row ${i}`)\r\n          debugMessage(r)\r\n\r\n          // validate the row\r\n          const row = await validateRow(r)\r\n\r\n          const [title, subject, course, instr1, instr2, email1, email2, days1, days2, time1, time2, section] = row\r\n\r\n          const ics1 = await createIcsEvent({\r\n            title,\r\n            subject,\r\n            course,\r\n            section,\r\n            instructor: instr1,\r\n            email: email1,\r\n            days: days1,\r\n            times: time1,\r\n            fromDate: args.fromDate,\r\n            toDate: args.toDate\r\n          })\r\n\r\n          // Set the file name\r\n          const fn1 = `${title.replace(/[/\\\\?%*:|\"<>\\s]/g, '-')}__${section}_${days1.replace(/,/g, '')}__${time1.replace(/[:-\\s]/g, '')}`\r\n          const ext = '.ics'\r\n\r\n          const fp1 = path.join(outputDir, fn1 + ext)\r\n          const f1 = await writeIcsToDisk(ics1, fp1)\r\n          debugMessage('Created' + ' ' + f1)\r\n\r\n          created.push({\r\n            title,\r\n            subject,\r\n            course,\r\n            section,\r\n            instructor: instr1,\r\n            email: email1,\r\n            days: days1,\r\n            times: time1,\r\n            fromDate: args.fromDate,\r\n            toDate: args.toDate,\r\n            filename: f1\r\n          })\r\n\r\n          if (days2 && time2) {\r\n            const ics2 = await createIcsEvent({\r\n              title,\r\n              subject,\r\n              course,\r\n              section,\r\n              instructor: instr1,\r\n              email: email1,\r\n              days: days2,\r\n              times: time2,\r\n              fromDate: args.fromDate,\r\n              toDate: args.toDate\r\n            })\r\n            const fn2 = `${title.replace(/[/\\\\?%*:|\"<>\\s]/g, '-')}__${section}_${days2.replace(/,/g, '')}__${time2.replace(/[:-\\s]/g, '')}`\r\n            const fp2 = path.join(outputDir, fn2 + ext)\r\n            const f2 = await writeIcsToDisk(ics2, fp2)\r\n            debugMessage('Created' + ' ' + f2)\r\n          \r\n            created.push({\r\n              title,\r\n              subject,\r\n              course,\r\n              section,\r\n              instructor: instr1,\r\n              email: email1,\r\n              days: days2,\r\n              times: time2,\r\n              fromDate: args.fromDate,\r\n              toDate: args.toDate,\r\n              filename: f2\r\n            })\r\n          }\r\n\r\n        } catch (e) {\r\n          console.error(e)\r\n        } finally {\r\n          i++\r\n        }\r\n\r\n      }\r\n\r\n\r\n      // once everything is done processing, create the index json file\r\n      await fs.writeFile(outputDir + '/' + 'index.json', JSON.stringify(created), 'utf8')\r\n\r\n      console.log('Done!')\r\n    }\r\n  })\r\n\r\n}\r\n\r\nmodule.exports = { parse }"],"names":["RRule","require","fs","promises","Papa","ics","moment","validateArgs","validateRow","daysFromString","timeDiff","firstDayAfterDate","flipName","path","format","suppressDeprecationWarnings","parse","argv","debugMessage","message","verbose","console","debug","JSON","stringify","readCsv","filepath","readFile","e","createIcsEvent","title","subject","course","section","instructor","email","days","times","fromDate","toDate","daysArr","rrule","freq","WEEKLY","byweekday","map","day","SU","MO","TU","WE","TH","FR","SA","filter","until","Date","firstDay","start","split","duration","recurrenceRule","toString","eventTitle","event","description","status","organizer","name","Promise","resolve","reject","createEvent","err","val","writeIcsToDisk","icsData","fileName","writeFile","args","outputDir","normalize","csv","inputFile","complete","results","created","rows","data","slice","i","r","row","instr1","instr2","email1","email2","days1","days2","time1","time2","ics1","fn1","replace","ext","fp1","join","f1","push","filename","ics2","fn2","fp2","f2","error","log","module","exports"],"mappings":"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"}