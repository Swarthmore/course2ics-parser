{"version":3,"file":"csv2ics.module.js","sources":["../src/index.js"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nconst {RRule} = require('rrule')\r\nconst yargs = require('yargs/yargs')\r\nconst {hideBin} = require('yargs/helpers')\r\nconst fs = require('fs').promises\r\nconst argv = yargs(hideBin(process.argv)).argv\r\nconst Papa = require('papaparse')\r\nconst ics = require('ics')\r\nconst moment = require('moment')\r\n\r\n// See: https://momentjs.com/docs/#/use-it/node-js/\r\nmoment().format()\r\n\r\n/**\r\n * Handle script errors\r\n * @param message - The error message\r\n */\r\nconst handleError = (message) => {\r\n    console.error('\\nAn error has occurred 🤕')\r\n    throw new Error(message)\r\n}\r\n\r\n// If --docs was passed as an argument, show the documentation, then end the process\r\nif (argv.docs) {\r\n    console.log(`\r\n        NAME\r\n            node-xls2ics\r\n            \r\n        DESCRIPTION\r\n            Generate an iCalendar (.ics) files from a csv.\r\n            \r\n            The following options are available:\r\n            \r\n            --input     REQUIRED. The path to the input csv. \r\n            \r\n            --from      REQUIRED. The starting date. Must be in ISO format YYYY-MM-DD. \r\n            \r\n            --to        REQUIRED. The ending date. Must be in ISO format YYYY-MM-DD.\r\n\r\n            --verbose   Run with verbose output.\r\n        \r\n            --docs      View the help docs (You're reading them! 🚀)\r\n        \r\n        \r\n        CSV FORMAT\r\n            The input csv MUST be in the following format\r\n            \r\n            TITLE, SUBJ, CRSE, INSTR1, INSTR2, INSTR1_EMAIL, INSTR2_EMAIL, DAYS1, DAYS2, TIME1, TIME2\r\n\r\n            TITLE           The title of the event\r\n            SUBJ            The course subject\r\n            CRSE            The course number\r\n            INSTR1          The full name of the primary instructor, in the format Last, First\r\n            INSTR2          The full name of the secondary instructor, in the format Last, First\r\n                            This field may also be blank\r\n            INSTR1_EMAIL    The email address of the primary instructor\r\n            INSTR2_EMAIL    The email address of the secondary instructor\r\n            DAYS1           A comma delimited set of days when the event happens.\r\n                            M = Monday, T = Tuesday, W = Wednesday, Th = Thursday, F = Friday, S = Saturday, Su = Sunday\r\n                            Ex: M,T,W,Th,F\r\n            DAYS2           A comma delimited set of days when the event happens. This second set is optional.\r\n            TIME1           The time for when the events defined in DAYS1 occur, in the format of HH-DD (24 hours)\r\n            TIME2           The time for when the events defined in DAYS2 occur, in the format of HH-DD (24 hours)\r\n            \r\n        EXAMPLE USAGE\r\n            node src/index.js --input=/path/to/input.csv --from=2020-01-01 --to=2020-03-01 \r\n        \r\n        CAVEATS\r\n            Files will be saved to PROJECT_ROOT/output. This means the output folder must be created before usage.\r\n            \r\n    `)\r\n\r\n    process.exit()\r\n}\r\n\r\n// If --input was not passed to the script, throw an error\r\nif (!argv.input) {\r\n    handleError('--input is missing')\r\n}\r\n\r\n// if --from was not passed to the script, throw an error\r\nif (!argv.from) {\r\n    handleError('--from is missing')\r\n}\r\n\r\n// if --to was not passed to the script, throw an error\r\nif (!argv.to) {\r\n    handleError('--to is missing')\r\n}\r\n\r\n/**\r\n * Returns a numeric representation of day string\r\n * @param day - The day. One of M,T,W,Th,F,Sa\r\n * @returns {number}\r\n */\r\nconst dayToNum = day => {\r\n    switch(day) {\r\n        case 'S':\r\n            return 0\r\n        case 'M':\r\n            return 1\r\n        case 'T':\r\n            return 2\r\n        case 'W':\r\n            return 3\r\n        case 'Th':\r\n            return 4\r\n        case 'F':\r\n            return 5\r\n        case 'Sa':\r\n            return 6\r\n        default:\r\n            throw new Error('Invalid day given')\r\n    }\r\n}\r\n/**\r\n * Returns the days from a string\r\n * @param str - The string of days in the format M,T,W,Th,F\r\n * @returns {string[]}\r\n * @example A string, 'M,Th,F' will return ['M','Th','F']\r\n */\r\nconst daysFromString = (str) => str.split(',')\r\n\r\n/**\r\n * Returns the from and to time from a string\r\n * @param str - The time string in the format of hh:mm - hh:mm\r\n * @returns {{ from: string, to: string }}\r\n * @example '12:00 - 14:00` will return { from: '12:00', to: '14:00' }\r\n */\r\nconst timeFromString = (str) => {\r\n    const s = str.split('-')\r\n    const from = s[0].trim()\r\n    const to = s[1].trim()\r\n    return { from, to }\r\n}\r\n\r\n/**\r\n * Converts ms to days, hour, minute, seconds\r\n * @param ms - The time in ms\r\n * @see https://gist.github.com/Erichain/6d2c2bf16fe01edfcffa\r\n * @returns {{ hours: number, seconds: number, minutes: number, days: number }}\r\n */\r\nconst convertMS = (ms) => {\r\n    let days, hours, minutes, seconds\r\n    seconds = Math.floor(ms / 1000)\r\n    minutes = Math.floor(seconds / 60)\r\n    seconds = seconds % 60\r\n    hours = Math.floor(minutes / 60)\r\n    minutes = minutes % 60\r\n    days = Math.floor(hours / 24)\r\n    hours = hours % 24\r\n    return { days, hours, minutes, seconds }\r\n}\r\n\r\n/**\r\n * Return the difference in time between a time string\r\n * @param timeStr - The time string to get the difference from. This needs to be in the format of hh:mm - hh:mm\r\n * @returns {{hours: number, seconds: number, minutes: number, days: number}}\r\n */\r\nconst timeDiff = (timeStr) => {\r\n\r\n    // Get the hours for t1\r\n    const {from, to} = timeFromString(timeStr)\r\n\r\n    const [fromHrs, fromMins] = from.split(':')\r\n    const [toHrs, toMins] = to.split(':')\r\n\r\n    // Use an arbitrary date for each\r\n    const d1 = new Date(2000, 0, 1,  fromHrs, fromMins)\r\n    const d2 = new Date(2000, 0, 1, toHrs, toMins)\r\n\r\n    // the following is to handle cases where the times are on the opposite side of\r\n    // midnight e.g. when you want to get the difference between 9:00 PM and 5:00 AM\r\n    if (d2 < d1) {\r\n        d2.setDate(d2.getDate() + 1);\r\n    }\r\n\r\n    const diff = d2 - d1\r\n    return convertMS(diff)\r\n}\r\n\r\n/**\r\n * Return the first day that occurs, starting at fromDate\r\n * @param fromDate\r\n * @param days\r\n * @param times\r\n * @returns {void | this | number | this | IDBRequest<IDBValidKey> | DataTransferItem | Promise<void>}\r\n */\r\nconst firstDayAfterDate = (fromDate, days, times) => {\r\n    try {\r\n\r\n        // Get the first item in the days string\r\n        // This will give one of M,T,W,Th,F\r\n        const [firstDay] = daysFromString(days)\r\n\r\n        // Convert day to num\r\n        const firstDayNum = dayToNum(firstDay)\r\n\r\n        // Get the start time from the times string\r\n\r\n        const {from: fromTime} = timeFromString(times)\r\n        // Get the hours and minutes from fromTime\r\n        const [hrs, mins] = fromTime.split(':')\r\n\r\n        // Create the from date object and assign the hours and minutes to it\r\n        const from = moment(fromDate)\r\n        from.set('hour', hrs)\r\n        from.set('minute', mins)\r\n\r\n        // placeholder for the moment object matching the first occurrence of day\r\n        let first = moment(from)\r\n\r\n        // increment first.day until it matches firstDayNum\r\n        do {\r\n            first = first.add(1, 'days')\r\n\r\n        } while (first.day() !== firstDayNum)\r\n\r\n        // return the first occurance\r\n        return first\r\n\r\n    } catch (e) {\r\n        throw e\r\n    }\r\n}\r\n/**\r\n * The main function\r\n * @param argv - Arguments - See docs\r\n * @returns {Promise<void>}\r\n */\r\nconst main = async (argv) => {\r\n\r\n    // Create the file path\r\n    const fp = `${__dirname}/${argv.input}`\r\n\r\n    // Read the CSV\r\n    const file = await fs.readFile(fp, 'utf8')\r\n\r\n    // Output a debug message. This will only work if --verbose is passed to the script\r\n    const debugMessage = (message) => {\r\n        if (!argv.verbose) return\r\n        console.debug(\r\n            typeof message === 'string' ? message : JSON.stringify(message)\r\n        )\r\n    }\r\n\r\n    // Handle the processing of a single row of data\r\n    const processRow = async ([ title, subject, course, instr1, instr2, email1, email2, days1, days2, time1, time2 ]) => {\r\n\r\n        /**\r\n         * Creates a single ics file\r\n         * @param instr\r\n         * @param email\r\n         * @param days\r\n         * @param times\r\n         * @returns {Promise<*>}\r\n         */\r\n        const createAndWriteEvent = async (instr, email, days, times) => {\r\n            try {\r\n\r\n                const spl = daysFromString(days)\r\n                const rrule = new RRule({\r\n                    freq: RRule.WEEKLY,\r\n                    byweekday: spl.map(day => {\r\n                        switch(day) {\r\n                            case 'M':\r\n                                return RRule.MO\r\n                            case 'T':\r\n                                return RRule.TU\r\n                            case 'W':\r\n                                return RRule.WE\r\n                            case 'Th':\r\n                                return RRule.TH\r\n                            case 'F':\r\n                                return RRule.FR\r\n                            default:\r\n                                break\r\n                        }\r\n                    })\r\n                        .filter(day => day),\r\n                    until: new Date(argv.to)\r\n                })\r\n\r\n                const firstDay = firstDayAfterDate(argv.from, days, times)\r\n                const start = firstDay.format('YYYY-M-D-H-m').split(\"-\")\r\n\r\n                const duration = timeDiff(times)\r\n\r\n                // rrule.toString() will include the beginning RRULE:\r\n                // This is not needed with the ics library\r\n                // This line of code splits the returned rrule string at RRULE: and assigns the\r\n                // second part (the part we need) to a variable.\r\n                const [,recurrenceRule] = rrule.toString().split('RRULE:')\r\n\r\n                const eventTitle = `${subject}${course}`\r\n\r\n                const event = {\r\n                    // Start is in the format [year, month, day, hour, min]\r\n                    start: start,\r\n                    duration: duration,\r\n                    recurrenceRule: recurrenceRule,\r\n                    title: eventTitle,\r\n                    description: title,\r\n                    status: 'CONFIRMED',\r\n                    organizer: {\r\n                        name: instr,\r\n                        email: email\r\n                    }\r\n                }\r\n\r\n                const fp = ics.createEvent(event, async (err, val) => {\r\n\r\n                    if (err) {\r\n                        throw err\r\n                    }\r\n\r\n                    // Set the file name\r\n                    const fn = start.join('-') + '_' + days.replace(/,/g, '') + '_' + times.replace(/[:-\\s]/g, '') + '_' + subject + '-' + course + '.ics'\r\n\r\n                    // Set the filepath\r\n                    const fp = `output/${fn}`\r\n\r\n                    // Save the file\r\n                    await fs.writeFile(fp, val)\r\n\r\n                    // Resolve promise with filepath\r\n                    return fp\r\n\r\n                })\r\n\r\n                return fp\r\n\r\n            } catch (e) {\r\n                // Reject promise with error\r\n                throw e\r\n            }\r\n        }\r\n\r\n        // Create the ics file for the primary event\r\n        const fp1 = await createAndWriteEvent(instr1, email1, days1, time1)\r\n        console.log('Wrote new ics to disk', fp1)\r\n\r\n        // If days2 and time2 are provided, create the ics for that event\r\n        if (days2 && time2) {\r\n            const fp2 = await createAndWriteEvent(instr1, email1, days2, time2)\r\n            console.log('Wrote new ics to disk', fp2)\r\n        }\r\n\r\n    }\r\n\r\n    // Handle the processed results\r\n    const handleResults = (results) => {\r\n        const rows = results.data.slice(1)\r\n        // Process the rows\r\n        rows.forEach(async row => {\r\n            await processRow(row)\r\n        })\r\n    }\r\n\r\n    // Use the papa to parse the file 🍕\r\n    Papa.parse(file, {\r\n        complete: results => handleResults(results)\r\n    })\r\n\r\n}\r\n\r\n(async() => {\r\n    await main(argv)\r\n    return 0\r\n})()"],"names":["RRule","require","yargs","hideBin","fs","promises","argv","process","Papa","ics","moment","format","handleError","message","console","error","Error","docs","log","exit","input","from","to","daysFromString","str","split","timeFromString","s","trim","main","fp","__dirname","readFile","file","parse","complete","results","data","slice","forEach","row","title","subject","course","instr1","email1","days1","days2","time1","time2","createAndWriteEvent","instr","email","days","times","spl","rrule","freq","WEEKLY","byweekday","map","day","MO","TU","WE","TH","FR","filter","until","Date","start","fromDate","firstDayNum","dayToNum","hrs","mins","set","first","add","e","firstDayAfterDate","duration","fromHrs","fromMins","toHrs","toMins","d1","d2","setDate","getDate","seconds","Math","floor","minutes","hours","toString","createEvent","recurrenceRule","description","status","organizer","name","err","val","join","replace","writeFile","fp1","fp2","processRow","handleResults"],"mappings":"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"}