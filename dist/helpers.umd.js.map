{"version":3,"file":"helpers.umd.js","sources":["../src/helpers.js"],"sourcesContent":["/**\n * Returns the from and to time from a string\n * @param str - The time string in the format of hh:mm - hh:mm\n * @returns {{ from: string, to: string }}\n * @example '12:00 - 14:00` will return { from: '12:00', to: '14:00' }\n */\nconst timeFromString = (str) => {\n  const s = str.split('-')\n  const from = s[0].trim()\n  const to = s[1].trim()\n  return { from, to }\n}\n\n/**\n * Converts ms to days, hour, minute, seconds\n * @param ms - The time in ms\n * @see https://gist.github.com/Erichain/6d2c2bf16fe01edfcffa\n * @returns {{ hours: number, seconds: number, minutes: number, days: number }}\n */\nconst convertMS = (ms) => {\n  let days, hours, minutes, seconds\n  seconds = Math.floor(ms / 1000)\n  minutes = Math.floor(seconds / 60)\n  seconds = seconds % 60\n  hours = Math.floor(minutes / 60)\n  minutes = minutes % 60\n  days = Math.floor(hours / 24)\n  hours = hours % 24\n  return { days, hours, minutes, seconds }\n}\n\n/**\n * Return the difference in time between a time string\n * @param timeStr - The time string to get the difference from. This needs to be in the format of hh:mm - hh:mm\n * @returns {{hours: number, seconds: number, minutes: number, days: number}}\n */\nconst timeDiff = (timeStr) => {\n\n  // Get the hours for t1\n  const { from, to } = timeFromString(timeStr)\n\n  const [fromHrs, fromMins] = from.split(':')\n  const [toHrs, toMins] = to.split(':')\n\n  // Use an arbitrary date for each\n  const d1 = new Date(2000, 0, 1, fromHrs, fromMins)\n  const d2 = new Date(2000, 0, 1, toHrs, toMins)\n\n  // the following is to handle cases where the times are on the opposite side of\n  // midnight e.g. when you want to get the difference between 9:00 PM and 5:00 AM\n  if (d2 < d1) {\n    d2.setDate(d2.getDate() + 1);\n  }\n\n  const diff = d2 - d1\n  return convertMS(diff)\n}\n\n/**\n * Returns a numeric representation of day string\n * @param day - The day. One of U, M, T, W, R, F, S\n * @returns {number}\n */\nconst dayToNum = day => {\n  switch (day) {\n    case 'U':\n      return 0\n    case 'M':\n      return 1\n    case 'T':\n      return 2\n    case 'W':\n      return 3\n    case 'R':\n      return 4\n    case 'F':\n      return 5\n    case 'S':\n      return 6\n    default:\n      throw new Error('Invalid day given')\n  }\n}\n\n/**\n * Returns the days from a string\n * @param str - The string of days in the format M,T,W,Th,F\n * @returns {string[]}\n * @example A string, 'M,Th,F' will return ['M','Th','F']\n */\nconst daysFromString = (str) => str.split(',')\n\n/**\n * Return the first day that occurs, starting at fromDate\n * @param fromDate\n * @param days\n * @param times\n * @param moment - The moment instance\n * @returns {void | this | number | this | IDBRequest<IDBValidKey> | DataTransferItem | Promise<void>}\n */\nconst firstDayAfterDate = (fromDate, days, times, moment) => {\n\n  try {\n\n    // Get the first item in the days string\n    // This will give one of M,T,W,Th,F\n    const [firstDay] = daysFromString(days)\n\n    // Convert day to num\n    const firstDayNum = dayToNum(firstDay)\n\n    // Get the start time from the times string\n    const { from: fromTime } = timeFromString(times)\n\n    // Get the hours and minutes from fromTime\n    const [hrs, mins] = fromTime.split(':')\n\n    // Create the from date object and assign the hours and minutes to it\n    const from = moment(fromDate)\n    from.set('hour', hrs)\n    from.set('minute', mins)\n\n    // placeholder for the moment object matching the first occurrence of day\n    let first = moment(from)\n\n    // increment first.day until it matches firstDayNum\n    do {\n      first = first.add(1, 'days')\n\n    } while (first.day() !== firstDayNum)\n\n    // return the first occurance\n    return first\n\n  } catch (e) {\n    throw e\n  }\n}\n\n/**\n * Returns FIRST LAST name\n * @param {*} str - The name in the format of LAST, FIRST\n */\nconst flipName = (str) => {\n  const split = str.split(',')\n  const first = split[1].trim()\n  const last = split[0].trim()\n  return `${first} ${last}`\n}\n\nmodule.exports = {\n  convertMS,\n  firstDayAfterDate,\n  daysFromString,\n  dayToNum,\n  timeDiff,\n  timeFromString,\n  flipName\n}"],"names":["timeFromString","str","s","split","from","trim","to","convertMS","ms","days","hours","minutes","seconds","Math","floor","timeDiff","timeStr","fromHrs","fromMins","toHrs","toMins","d1","Date","d2","setDate","getDate","diff","dayToNum","day","Error","daysFromString","firstDayAfterDate","fromDate","times","moment","firstDay","firstDayNum","fromTime","hrs","mins","set","first","add","e","flipName","last","module","exports"],"mappings":"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"}