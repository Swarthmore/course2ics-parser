{"version":3,"file":"helpers.umd.js","sources":["../src/helpers.js"],"sourcesContent":["/**\n * Returns the from and to time from a string\n * @param str - The time string in the format of hh:mm - hh:mm\n * @returns {{ from: string, to: string }}\n * @example '12:00 - 14:00` will return { from: '12:00', to: '14:00' }\n */\nconst timeFromString = (str) => {\n  const s = str.split('-')\n  const from = s[0].trim()\n  const to = s[1].trim()\n  return { from, to }\n}\n\n/**\n * Converts ms to days, hour, minute, seconds\n * @param ms - The time in ms\n * @see https://gist.github.com/Erichain/6d2c2bf16fe01edfcffa\n * @returns {{ hours: number, seconds: number, minutes: number, days: number }}\n */\nconst convertMS = (ms) => {\n  let days, hours, minutes, seconds\n  seconds = Math.floor(ms / 1000)\n  minutes = Math.floor(seconds / 60)\n  seconds = seconds % 60\n  hours = Math.floor(minutes / 60)\n  minutes = minutes % 60\n  days = Math.floor(hours / 24)\n  hours = hours % 24\n  return { days, hours, minutes, seconds }\n}\n\n/**\n * Return the difference in time between a time string\n * @param timeStr - The time string to get the difference from. This needs to be in the format of hh:mm - hh:mm\n * @returns {{hours: number, seconds: number, minutes: number, days: number}}\n */\nconst timeDiff = (timeStr) => {\n\n  // Get the hours for t1\n  const { from, to } = timeFromString(timeStr)\n\n  const [fromHrs, fromMins] = from.split(':')\n  const [toHrs, toMins] = to.split(':')\n\n  // Use an arbitrary date for each\n  const d1 = new Date(2000, 0, 1, fromHrs, fromMins)\n  const d2 = new Date(2000, 0, 1, toHrs, toMins)\n\n  // the following is to handle cases where the times are on the opposite side of\n  // midnight e.g. when you want to get the difference between 9:00 PM and 5:00 AM\n  if (d2 < d1) {\n    d2.setDate(d2.getDate() + 1);\n  }\n\n  const diff = d2 - d1\n  return convertMS(diff)\n}\n\n/**\n * Returns a numeric representation of day string\n * @param day - The day. One of U, M, T, W, R, F, S\n * @returns {number}\n */\nconst dayToNum = day => {\n  switch (day) {\n    case 'U':\n      return 0\n    case 'M':\n      return 1\n    case 'T':\n      return 2\n    case 'W':\n      return 3\n    case 'R':\n      return 4\n    case 'F':\n      return 5\n    case 'S':\n      return 6\n    default:\n      throw new Error('Invalid day given')\n  }\n}\n\n/**\n * Returns the days from a string\n * @param str - The string of days in the format M,T,W,Th,F\n * @returns {string[]}\n * @example A string, 'M,Th,F' will return ['M','Th','F']\n */\nconst daysFromString = (str) => str.split(',')\n\n/**\n * Return the first day that occurs, starting at fromDate\n * @param fromDate\n * @param days\n * @param times\n * @param moment - The moment instance\n * @returns {void | this | number | this | IDBRequest<IDBValidKey> | DataTransferItem | Promise<void>}\n */\nconst firstDayAfterDate = (fromDate, days, times, moment) => {\n\n  try {\n\n    // Get the first item in the days string\n    // This will give one of M,T,W,Th,F\n    const [firstDay] = daysFromString(days)\n\n    // Convert day to num\n    const firstDayNum = dayToNum(firstDay)\n\n    // Get the start time from the times string\n    const { from: fromTime } = timeFromString(times)\n\n    // Get the hours and minutes from fromTime\n    const [hrs, mins] = fromTime.split(':')\n\n    // Create the from date object and assign the hours and minutes to it\n    const from = moment(fromDate)\n    from.set('hour', hrs)\n    from.set('minute', mins)\n\n    // placeholder for the moment object matching the first occurrence of day\n    let first = moment(from)\n\n    // increment first.day until it matches firstDayNum\n    do {\n      first = first.add(1, 'days')\n\n    } while (first.day() !== firstDayNum)\n\n    // return the first occurance\n    return first\n\n  } catch (e) {\n    throw e\n  }\n}\n\n/**\n * Returns FIRST LAST name\n * @param {*} str - The name in the format of LAST, FIRST\n */\nconst flipName = (str) => {\n  const split = str.split(',')\n  const first = split[1].trim()\n  const last = split[0].trim()\n  return `${first} ${last}`\n}\n\nmodule.exports = {\n  convertMS,\n  firstDayAfterDate,\n  daysFromString,\n  dayToNum,\n  timeDiff,\n  timeFromString,\n  flipName\n}"],"names":["timeFromString","str","s","split","from","trim","to","convertMS","ms","days","hours","minutes","seconds","Math","floor","dayToNum","day","Error","daysFromString","module","exports","firstDayAfterDate","fromDate","times","moment","firstDay","firstDayNum","fromTime","hrs","mins","set","first","add","e","timeDiff","timeStr","fromHrs","fromMins","toHrs","toMins","d1","Date","d2","setDate","getDate","flipName"],"mappings":"6EAMA,MAAMA,EAAkBC,IACtB,MAAMC,EAAID,EAAIE,MAAM,KAGpB,MAAO,CAAEC,KAFIF,EAAE,GAAGG,OAEHC,GADJJ,EAAE,GAAGG,SAUZE,EAAaC,IACjB,IAAIC,EAAMC,EAAOC,EAASC,EAQ1B,OAPAA,EAAUC,KAAKC,MAAMN,EAAK,KAC1BG,EAAUE,KAAKC,MAAMF,EAAU,IAC/BA,GAAoB,GACpBF,EAAQG,KAAKC,MAAMH,EAAU,IAC7BA,GAAoB,GACpBF,EAAOI,KAAKC,MAAMJ,EAAQ,IAC1BA,GAAgB,GACT,CAAED,KAAAA,EAAMC,MAAAA,EAAOC,QAAAA,EAASC,QAAAA,IAmC3BG,EAAWC,IACf,OAAQA,GACN,IAAK,IACH,SACF,IAAK,IACH,SACF,IAAK,IACH,SACF,IAAK,IACH,SACF,IAAK,IACH,SACF,IAAK,IACH,SACF,IAAK,IACH,SACF,QACE,UAAUC,MAAM,uBAUhBC,EAAkBjB,GAAQA,EAAIE,MAAM,KA4D1CgB,OAAOC,QAAU,CACfb,UAAAA,EACAc,kBApDwB,CAACC,EAAUb,EAAMc,EAAOC,KAEhD,IAIE,MAAOC,GAAYP,EAAeT,GAG5BiB,EAAcX,EAASU,IAGrBrB,KAAMuB,GAAa3B,EAAeuB,IAGnCK,EAAKC,GAAQF,EAASxB,MAAM,KAG7BC,EAAOoB,EAAOF,GACpBlB,EAAK0B,IAAI,OAAQF,GACjBxB,EAAK0B,IAAI,SAAUD,GAGnB,IAAIE,EAAQP,EAAOpB,GAGnB,GACE2B,EAAQA,EAAMC,IAAI,EAAG,cAEdD,EAAMf,QAAUU,GAGzB,OAAOK,EAEP,MAAOE,GACP,MAAMA,IAkBRf,eAAAA,EACAH,SAAAA,EACAmB,SAvHgBC,IAGhB,MAAM/B,KAAEA,EAAFE,GAAQA,GAAON,EAAemC,IAE7BC,EAASC,GAAYjC,EAAKD,MAAM,MAChCmC,EAAOC,GAAUjC,EAAGH,MAAM,KAG3BqC,EAAK,IAAIC,KAAK,IAAM,EAAG,EAAGL,EAASC,GACnCK,EAAK,IAAID,KAAK,IAAM,EAAG,EAAGH,EAAOC,GASvC,OALIG,EAAKF,GACPE,EAAGC,QAAQD,EAAGE,UAAY,GAIrBrC,EADMmC,EAAKF,IAsGlBxC,eAAAA,EACA6C,SAdgB5C,IAChB,MAAME,EAAQF,EAAIE,MAAM,KAGxB,MAAQ,GAFMA,EAAM,GAAGE,UACVF,EAAM,GAAGE"}