{"version":3,"file":"course2ics-parser.modern.js","sources":["../src/index.js"],"sourcesContent":["const { RRule } = require('rrule')\r\nconst fs = require('fs').promises\r\nconst Papa = require('papaparse')\r\nconst ics = require('ics')\r\nconst moment = require('moment')\r\nconst { validateArgs, validateRow } = require('./validators')\r\nconst { daysFromString, timeDiff, firstDayAfterDate, flipName } = require('./helpers')\r\nconst path = require('path')\r\nconst pug = require('pug')\r\n\r\n// See: https://momentjs.com/docs/#/use-it/node-js/\r\nmoment().format()\r\n\r\n// See: https://github.com/moment/moment/issues/3488\r\nmoment.suppressDeprecationWarnings = true;\r\n\r\nasync function makeSite(outputDir) {\r\n\r\n  // Get the files json file in the directory\r\n  const files = await fs.readdir(outputDir)\r\n\r\n  const [index] = files.filter(file => path.extname(file) === '.json') \r\n\r\n  if (!index) {\r\n    throw new Error('No index file found')\r\n  }\r\n\r\n  // Get the file contents of index json\r\n  const json = await fs.readFile(path.join(outputDir, index))\r\n\r\n  // If the index file exists, create the file using the template\r\n  const compiledFunction = pug.compileFile(path.join(process.cwd(), 'src', 'templates', 'report.pug'))\r\n\r\n  const html = compiledFunction({ results: json })\r\n\r\n  // Write index.html to the output directory\r\n  await fs.writeFile(path.join(outputDir, 'index.html'), html, 'utf8')\r\n\r\n}\r\n\r\n/**\r\n * Parses a csv and creates an ics file for each row. The generated ics will contain events recurring weekly from\r\n * the given fromDate until the given toDate.\r\n *  \r\n * @param {Object}  argv - The function arguments\r\n * @param {boolean} argv.verbose - Runs the function in verbose mode\r\n * @param {string}  argv.outputDir - The directory to save the files to. This directory must exist.\r\n * @param {string}  argv.inputFile - The input csv\r\n * @param {string}  argv.toDate - The starting date\r\n * @param {string}  argv.fromDate - The end date\r\n * \r\n * @returns {Promise<void>}\r\n */\r\n\r\nasync function parse(argv) {\r\n\r\n  /**\r\n   * Output a debug message. This will only work if --verbose is passed to the script\r\n   * @param {string} message - The message to output \r\n   * @returns void\r\n   */\r\n  const debugMessage = (message) => {\r\n    if (!argv.verbose) return\r\n    console.debug(\r\n      typeof message === 'string' ? message : JSON.stringify(message)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Reads a CSV file from disk\r\n   * @param {string} filepath - The path to the csv\r\n   * @returns {Promise<string>} - The contents of the file\r\n   */\r\n  async function readCsv(filepath) {\r\n    try {\r\n      return await fs.readFile(filepath, 'utf8')\r\n    } catch (e) {\r\n      return e\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates an ics event\r\n   * \r\n   * @param {Object} args - The function arguments\r\n   * @param {string} args.subject\r\n   * @param {string} args.course\r\n   * @param {string} args.section\r\n   * @param {string} args.instructor\r\n   * @param {string} args.email\r\n   * @param {string} args.days\r\n   * @param {string} args.times\r\n   * @param {string} args.fromDate\r\n   * @param {string} args.toDate \r\n   * \r\n   * @returns {Promise<string>} - Returns a promise that resolves with the ICS event\r\n   */\r\n  async function createIcsEvent({ title, subject, course, section, instructor, email, days, times, fromDate, toDate }) {\r\n\r\n    const daysArr = daysFromString(days)\r\n\r\n    const rrule = new RRule({\r\n      freq: RRule.WEEKLY,\r\n      byweekday: daysArr.map(day => {\r\n        switch (day) {\r\n          case 'U':\r\n            return RRule.SU\r\n          case 'M':\r\n            return RRule.MO\r\n          case 'T':\r\n            return RRule.TU\r\n          case 'W':\r\n            return RRule.WE\r\n          case 'R':\r\n            return RRule.TH\r\n          case 'F':\r\n            return RRule.FR\r\n          case 'S':\r\n            return RRule.SA\r\n          default:\r\n            break\r\n        }\r\n      }).filter(day => day),\r\n      until: new Date(toDate)\r\n    })\r\n\r\n    const firstDay = firstDayAfterDate(fromDate, days, times, moment)\r\n\r\n    const start = firstDay.format('YYYY-M-D-H-m').split(\"-\")\r\n\r\n    const duration = timeDiff(times)\r\n\r\n    // rrule.toString() will include the beginning RRULE:\r\n    // This is not needed with the ics library\r\n    // This line of code splits the returned rrule string at RRULE: and assigns the\r\n    // second part (the part we need) to a variable.\r\n    const [, recurrenceRule] = rrule.toString().split('RRULE:')\r\n\r\n    const eventTitle = `${subject} ${course} ${section}`\r\n\r\n    const event = {\r\n      // Start is in the format [year, month, day, hour, min]\r\n      start: start,\r\n      duration: duration,\r\n      recurrenceRule: recurrenceRule,\r\n      title: eventTitle,\r\n      description: title,\r\n      status: 'CONFIRMED',\r\n      organizer: {\r\n        name: flipName(instructor),\r\n        email: email\r\n      }\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      ics.createEvent(event, (err, val) => {\r\n        if (err) reject(err)\r\n        resolve(val)\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Writes an ics file to disk\r\n   * @param {string} icsData - The generated ics data \r\n   * @param {string} fileName - The full file name to save\r\n   * @returns {Promise<string>} - Returns a promise that will resolve with the created filename\r\n   */\r\n  async function writeIcsToDisk(icsData, fileName) {\r\n    try {\r\n      await fs.writeFile(fileName, icsData)\r\n      return fileName\r\n    } catch (e) {\r\n      return e\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Runs the parser\r\n   * @return {Promise<{ title: string; subject: string; course: string; section: string; instructor: string; email: string; days: string; times: string; fromDate: any; toDate: any; filename: string; }[]>} - Returns a promise that resolves with the created files\r\n   */\r\n  async function runParser() {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      Papa.parse(csv, {\r\n        complete: async results => {\r\n\r\n          // keep track of the created files, along with the source row\r\n          let created = []\r\n\r\n          // Get the rows from papa parse\r\n          const rows = results.data.slice(1)\r\n\r\n          if (rows.length === 0) {\r\n            reject('No rows could be parsed from csv')\r\n          }\r\n\r\n          let i = 0\r\n\r\n          for await (let r of rows) {\r\n\r\n            try {\r\n              debugMessage('-------------------------------------------')\r\n              debugMessage(`Processing row ${i}`)\r\n              debugMessage(r)\r\n\r\n              // validate the row\r\n              const row = await validateRow(r)\r\n\r\n              const [title, subject, course, instr1, instr2, email1, email2, days1, days2, time1, time2, section] = row\r\n\r\n              const ics1 = await createIcsEvent({\r\n                title,\r\n                subject,\r\n                course,\r\n                section,\r\n                instructor: instr1,\r\n                email: email1,\r\n                days: days1,\r\n                times: time1,\r\n                fromDate: args.fromDate,\r\n                toDate: args.toDate\r\n              })\r\n\r\n              // Set the file name\r\n              const fn1 = `${title.replace(/[/\\\\?%*:|\"<>\\s]/g, '-')}__${section}_${days1.replace(/,/g, '')}__${time1.replace(/[:-\\s]/g, '')}`\r\n              const ext = '.ics'\r\n\r\n              const fp1 = path.join(outputDir, fn1 + ext)\r\n              const f1 = await writeIcsToDisk(ics1, fp1)\r\n              debugMessage('Created' + ' ' + f1)\r\n\r\n              created.push({\r\n                title,\r\n                subject,\r\n                course,\r\n                section,\r\n                instructor: instr1,\r\n                email: email1,\r\n                days: days1,\r\n                times: time1,\r\n                fromDate: args.fromDate,\r\n                toDate: args.toDate,\r\n                filename: f1\r\n              })\r\n\r\n              if (days2 && time2) {\r\n                const ics2 = await createIcsEvent({\r\n                  title,\r\n                  subject,\r\n                  course,\r\n                  section,\r\n                  instructor: instr1,\r\n                  email: email1,\r\n                  days: days2,\r\n                  times: time2,\r\n                  fromDate: args.fromDate,\r\n                  toDate: args.toDate\r\n                })\r\n                const fn2 = `${title.replace(/[/\\\\?%*:|\"<>\\s]/g, '-')}__${section}_${days2.replace(/,/g, '')}__${time2.replace(/[:-\\s]/g, '')}`\r\n                const fp2 = path.join(outputDir, fn2 + ext)\r\n                const f2 = await writeIcsToDisk(ics2, fp2)\r\n                debugMessage('Created' + ' ' + f2)\r\n\r\n                created.push({\r\n                  title,\r\n                  subject,\r\n                  course,\r\n                  section,\r\n                  instructor: instr1,\r\n                  email: email1,\r\n                  days: days2,\r\n                  times: time2,\r\n                  fromDate: args.fromDate,\r\n                  toDate: args.toDate,\r\n                  filename: f2\r\n                })\r\n              }\r\n\r\n            } catch (e) {\r\n              debugMessage(e)\r\n            } finally {\r\n              i++\r\n            }\r\n\r\n          }\r\n\r\n          // once everything is done processing, create the index json file\r\n          await fs.writeFile(outputDir + '/' + 'index.json', JSON.stringify(created), 'utf8')\r\n\r\n          debugMessage('Done!')\r\n\r\n          resolve(created)\r\n\r\n        }\r\n      })\r\n\r\n    })\r\n\r\n  }\r\n\r\n  // Validate the arguments\r\n  const args = await validateArgs(argv)\r\n\r\n  // Set the output directory based on the arguments provided\r\n  const outputDir = path.normalize(args.outputDir)\r\n\r\n  // Read the CSV\r\n  const csv = await readCsv(path.normalize(args.inputFile))\r\n\r\n  return runParser()\r\n\r\n}\r\n\r\nmodule.exports = { parse, makeSite }"],"names":["RRule","require","fs","promises","Papa","ics","moment","validateArgs","validateRow","daysFromString","timeDiff","firstDayAfterDate","flipName","path","pug","format","suppressDeprecationWarnings","makeSite","outputDir","files","readdir","index","filter","file","extname","Error","json","readFile","join","compiledFunction","compileFile","process","cwd","html","results","writeFile","parse","argv","debugMessage","message","verbose","console","debug","JSON","stringify","readCsv","filepath","e","createIcsEvent","title","subject","course","section","instructor","email","days","times","fromDate","toDate","daysArr","rrule","freq","WEEKLY","byweekday","map","day","SU","MO","TU","WE","TH","FR","SA","until","Date","firstDay","start","split","duration","recurrenceRule","toString","eventTitle","event","description","status","organizer","name","Promise","resolve","reject","createEvent","err","val","writeIcsToDisk","icsData","fileName","runParser","csv","complete","created","rows","data","slice","length","i","r","row","instr1","instr2","email1","email2","days1","days2","time1","time2","ics1","args","fn1","replace","ext","fp1","f1","push","filename","ics2","fn2","fp2","f2","normalize","inputFile","module","exports"],"mappings":"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"}