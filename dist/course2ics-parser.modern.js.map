{"version":3,"file":"course2ics-parser.modern.js","sources":["../src/index.js"],"sourcesContent":["const { RRule } = require('rrule')\r\nconst fs = require('fs').promises\r\nconst Papa = require('papaparse')\r\nconst ics = require('ics')\r\nconst moment = require('moment')\r\nconst { validateArgs, validateRow } = require('./validators')\r\nconst { daysFromString, timeDiff, firstDayAfterDate, flipName } = require('./helpers')\r\nconst path = require('path')\r\n\r\n// readCsvFunction -> papaParseCsv -> for each row, create an ics file -> if processed successfully, add row and filepath to index json -> once all rows are processed, resolve a promise with the index json and output directory\r\n\r\n// See: https://momentjs.com/docs/#/use-it/node-js/\r\nmoment().format()\r\n\r\n// See: https://github.com/moment/moment/issues/3488\r\nmoment.suppressDeprecationWarnings = true;\r\n\r\n/**\r\n * Parses a csv and creates an ics file for each row. The generated ics will contain events recurring weekly from\r\n * the given fromDate until the given toDate.\r\n *  \r\n * @param {Object}  argv - The function arguments\r\n * @param {boolean} argv.verbose - Runs the function in verbose mode\r\n * @param {string}  argv.outputDir - The directory to save the files to. This directory must exist.\r\n * @param {string}  argv.inputFile - The input csv\r\n * @param {string}  argv.toDate - The starting date\r\n * @param {string}  argv.fromDate - The end date\r\n * \r\n * @returns {Promise<void>}\r\n */\r\n\r\nasync function parse(argv) {\r\n\r\n  /**\r\n   * Output a debug message. This will only work if --verbose is passed to the script\r\n   * @param {string} message - The message to output \r\n   * @returns void\r\n   */\r\n  const debugMessage = (message) => {\r\n    if (!argv.verbose) return\r\n    console.debug(\r\n      typeof message === 'string' ? message : JSON.stringify(message)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Reads a CSV file from disk\r\n   * @param {string} filepath - The path to the csv\r\n   * @returns {Promise<string>} - The contents of the file\r\n   */\r\n  async function readCsv(filepath) {\r\n    try {\r\n      return await fs.readFile(filepath, 'utf8')\r\n    } catch (e) {\r\n      return e\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates an ics event\r\n   * \r\n   * @param {Object} args - The function arguments\r\n   * @param {string} args.subject\r\n   * @param {string} args.course\r\n   * @param {string} args.section\r\n   * @param {string} args.instructor\r\n   * @param {string} args.email\r\n   * @param {string} args.days\r\n   * @param {string} args.times\r\n   * @param {string} args.fromDate\r\n   * @param {string} args.toDate \r\n   * \r\n   * @returns {Promise<string>} - Returns a promise that resolves with the ICS event\r\n   */\r\n  async function createIcsEvent({ title, subject, course, section, instructor, email, days, times, fromDate, toDate }) {\r\n\r\n    const daysArr = daysFromString(days)\r\n\r\n    const rrule = new RRule({\r\n      freq: RRule.WEEKLY,\r\n      byweekday: daysArr.map(day => {\r\n        switch (day) {\r\n          case 'U':\r\n            return RRule.SU\r\n          case 'M':\r\n            return RRule.MO\r\n          case 'T':\r\n            return RRule.TU\r\n          case 'W':\r\n            return RRule.WE\r\n          case 'R':\r\n            return RRule.TH\r\n          case 'F':\r\n            return RRule.FR\r\n          case 'S':\r\n            return RRule.SA\r\n          default:\r\n            break\r\n        }\r\n      }).filter(day => day),\r\n      until: new Date(toDate)\r\n    })\r\n\r\n    const firstDay = firstDayAfterDate(fromDate, days, times, moment)\r\n\r\n    const start = firstDay.format('YYYY-M-D-H-m').split(\"-\")\r\n\r\n    const duration = timeDiff(times)\r\n\r\n    // rrule.toString() will include the beginning RRULE:\r\n    // This is not needed with the ics library\r\n    // This line of code splits the returned rrule string at RRULE: and assigns the\r\n    // second part (the part we need) to a variable.\r\n    const [, recurrenceRule] = rrule.toString().split('RRULE:')\r\n\r\n    const eventTitle = `${subject} ${course} ${section}`\r\n\r\n    const event = {\r\n      // Start is in the format [year, month, day, hour, min]\r\n      start: start,\r\n      duration: duration,\r\n      recurrenceRule: recurrenceRule,\r\n      title: eventTitle,\r\n      description: title,\r\n      status: 'CONFIRMED',\r\n      organizer: {\r\n        name: flipName(instructor),\r\n        email: email\r\n      }\r\n    }\r\n\r\n\r\n    return new Promise((resolve, reject) => {\r\n      ics.createEvent(event, (err, val) => {\r\n        if (err) reject(err)\r\n        resolve(val)\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   * Writes an ics file to disk\r\n   * @param {string} icsData - The generated ics data \r\n   * @param {string} fileName - The full file name to save\r\n   * @returns {Promise<string>} - Returns a promise that will resolve with the created filename\r\n   */\r\n  async function writeIcsToDisk(icsData, fileName) {\r\n    try {\r\n      await fs.writeFile(fileName, icsData)\r\n      return fileName\r\n    } catch (e) {\r\n      return e\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Runs the parser\r\n   * @return {Promise<void>}\r\n   */\r\n  async function runParser() {\r\n    Papa.parse(csv, {\r\n      complete: async results => {\r\n\r\n        // keep track of the created files, along with the source row\r\n        let created = []\r\n\r\n        // Get the rows from papa parse\r\n        const rows = results.data.slice(1)\r\n        let i = 0\r\n\r\n        for await (let r of rows) {\r\n\r\n          try {\r\n            debugMessage('-------------------------------------------')\r\n            debugMessage(`Processing row ${i}`)\r\n            debugMessage(r)\r\n\r\n            // validate the row\r\n            const row = await validateRow(r)\r\n\r\n            const [title, subject, course, instr1, instr2, email1, email2, days1, days2, time1, time2, section] = row\r\n\r\n            const ics1 = await createIcsEvent({\r\n              title,\r\n              subject,\r\n              course,\r\n              section,\r\n              instructor: instr1,\r\n              email: email1,\r\n              days: days1,\r\n              times: time1,\r\n              fromDate: args.fromDate,\r\n              toDate: args.toDate\r\n            })\r\n\r\n            // Set the file name\r\n            const fn1 = `${title.replace(/[/\\\\?%*:|\"<>\\s]/g, '-')}__${section}_${days1.replace(/,/g, '')}__${time1.replace(/[:-\\s]/g, '')}`\r\n            const ext = '.ics'\r\n\r\n            const fp1 = path.join(outputDir, fn1 + ext)\r\n            const f1 = await writeIcsToDisk(ics1, fp1)\r\n            debugMessage('Created' + ' ' + f1)\r\n\r\n            created.push({\r\n              title,\r\n              subject,\r\n              course,\r\n              section,\r\n              instructor: instr1,\r\n              email: email1,\r\n              days: days1,\r\n              times: time1,\r\n              fromDate: args.fromDate,\r\n              toDate: args.toDate,\r\n              filename: f1\r\n            })\r\n\r\n            if (days2 && time2) {\r\n              const ics2 = await createIcsEvent({\r\n                title,\r\n                subject,\r\n                course,\r\n                section,\r\n                instructor: instr1,\r\n                email: email1,\r\n                days: days2,\r\n                times: time2,\r\n                fromDate: args.fromDate,\r\n                toDate: args.toDate\r\n              })\r\n              const fn2 = `${title.replace(/[/\\\\?%*:|\"<>\\s]/g, '-')}__${section}_${days2.replace(/,/g, '')}__${time2.replace(/[:-\\s]/g, '')}`\r\n              const fp2 = path.join(outputDir, fn2 + ext)\r\n              const f2 = await writeIcsToDisk(ics2, fp2)\r\n              debugMessage('Created' + ' ' + f2)\r\n\r\n              created.push({\r\n                title,\r\n                subject,\r\n                course,\r\n                section,\r\n                instructor: instr1,\r\n                email: email1,\r\n                days: days2,\r\n                times: time2,\r\n                fromDate: args.fromDate,\r\n                toDate: args.toDate,\r\n                filename: f2\r\n              })\r\n            }\r\n\r\n          } catch (e) {\r\n            console.error(e)\r\n          } finally {\r\n            i++\r\n          }\r\n\r\n        }\r\n\r\n        // once everything is done processing, create the index json file\r\n        await fs.writeFile(outputDir + '/' + 'index.json', JSON.stringify(created), 'utf8')\r\n\r\n        debugMessage('Done!')\r\n\r\n        return\r\n      }\r\n    })\r\n  }\r\n\r\n  // Validate the arguments\r\n  const args = await validateArgs(argv)\r\n\r\n  // Set the output directory based on the arguments provided\r\n  const outputDir = path.normalize(args.outputDir)\r\n\r\n  // Read the CSV\r\n  const csv = await readCsv(path.normalize(args.inputFile))\r\n\r\n  return await runParser()\r\n\r\n}\r\n\r\nmodule.exports = { parse }"],"names":["RRule","require","fs","promises","Papa","ics","moment","validateArgs","validateRow","daysFromString","timeDiff","firstDayAfterDate","flipName","path","format","suppressDeprecationWarnings","parse","argv","debugMessage","message","verbose","console","debug","JSON","stringify","readCsv","filepath","readFile","e","createIcsEvent","title","subject","course","section","instructor","email","days","times","fromDate","toDate","daysArr","rrule","freq","WEEKLY","byweekday","map","day","SU","MO","TU","WE","TH","FR","SA","filter","until","Date","firstDay","start","split","duration","recurrenceRule","toString","eventTitle","event","description","status","organizer","name","Promise","resolve","reject","createEvent","err","val","writeIcsToDisk","icsData","fileName","writeFile","runParser","csv","complete","results","created","rows","data","slice","i","r","row","instr1","instr2","email1","email2","days1","days2","time1","time2","ics1","args","fn1","replace","ext","fp1","join","outputDir","f1","push","filename","ics2","fn2","fp2","f2","error","normalize","inputFile","module","exports"],"mappings":"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"}