{"version":3,"file":"course2ics-parser.modern.js","sources":["../src/index.js"],"sourcesContent":["const { RRule } = require('rrule')\r\nconst fs = require('fs').promises\r\nconst Papa = require('papaparse')\r\nconst ics = require('ics')\r\nconst moment = require('moment')\r\nconst { validateArgs, validateRow } = require('./validators')\r\nconst { daysFromString, timeDiff, firstDayAfterDate, flipName } = require('./helpers')\r\nconst path = require('path')\r\n\r\n// See: https://momentjs.com/docs/#/use-it/node-js/\r\nmoment().format()\r\n\r\n// See: https://github.com/moment/moment/issues/3488\r\nmoment.suppressDeprecationWarnings = true;\r\n\r\n\r\n/**\r\n * The main function\r\n * @param argv - Arguments - See docs\r\n * @returns {Promise<void>}\r\n */\r\nconst parse = async (argv) => {\r\n\r\n  // Output a debug message. This will only work if --verbose is passed to the script\r\n  const debugMessage = (message) => {\r\n    if (!argv.verbose) return\r\n    console.debug(\r\n      typeof message === 'string' ? message : JSON.stringify(message)\r\n    )\r\n  }\r\n\r\n  // Validate the arguments\r\n  validateArgs(argv)\r\n\r\n  // Set the output directory based on the arguments provided\r\n  const outputDir = path.normalize(argv.outputDir)\r\n\r\n  debugMessage(`Output dir: ${outputDir}`)\r\n\r\n  // Set the input directory based on the arguments provided\r\n  const inputFp = path.normalize(argv.inputFile)\r\n\r\n  debugMessage(`Input file: ${inputFp}`)\r\n\r\n  // Read the CSV\r\n  const file = await fs.readFile(inputFp, 'utf8')\r\n\r\n  // Handle the processing of a single row of data\r\n  const processRow = async (row) => {\r\n\r\n    // validate the row\r\n    const isValid = validateRow(row)\r\n\r\n    // if the row is not valid, return out of the function \r\n    if (!isValid) {\r\n      return\r\n    }\r\n\r\n    // destructure everything out of the row\r\n    const [title, subject, course, instr1, instr2, email1, email2, days1, days2, time1, time2, section] = row\r\n\r\n    /**\r\n     * Creates a single ics file\r\n     * @param instr\r\n     * @param email\r\n     * @param days\r\n     * @param times\r\n     * @returns {Promise<*>}\r\n     */\r\n    const createAndWriteEvent = async (instr, email, days, times) => {\r\n      try {\r\n\r\n        const spl = daysFromString(days)\r\n\r\n        const rrule = new RRule({\r\n          freq: RRule.WEEKLY,\r\n          byweekday: spl.map(day => {\r\n            switch (day) {\r\n              case 'U':\r\n                return RRule.SU\r\n              case 'M':\r\n                return RRule.MO\r\n              case 'T':\r\n                return RRule.TU\r\n              case 'W':\r\n                return RRule.WE\r\n              case 'R':\r\n                return RRule.TH\r\n              case 'F':\r\n                return RRule.FR\r\n              case 'S':\r\n                return RRule.SA\r\n              default:\r\n                break\r\n            }\r\n          })\r\n            .filter(day => day),\r\n          until: new Date(argv.toDate)\r\n        })\r\n\r\n        const firstDay = firstDayAfterDate(argv.fromDate, days, times, moment)\r\n\r\n        if (!firstDay) return\r\n\r\n        const start = firstDay.format('YYYY-M-D-H-m').split(\"-\")\r\n\r\n        const duration = timeDiff(times)\r\n\r\n        // rrule.toString() will include the beginning RRULE:\r\n        // This is not needed with the ics library\r\n        // This line of code splits the returned rrule string at RRULE: and assigns the\r\n        // second part (the part we need) to a variable.\r\n        const [, recurrenceRule] = rrule.toString().split('RRULE:')\r\n\r\n        const eventTitle = `${subject} ${course} ${section}`\r\n\r\n        const event = {\r\n          // Start is in the format [year, month, day, hour, min]\r\n          start: start,\r\n          duration: duration,\r\n          recurrenceRule: recurrenceRule,\r\n          title: eventTitle,\r\n          description: title,\r\n          status: 'CONFIRMED',\r\n          organizer: {\r\n            name: flipName(instr),\r\n            email: email\r\n          }\r\n        }\r\n\r\n        const fp = ics.createEvent(event, async (err, val) => {\r\n\r\n          if (err) {\r\n            throw err\r\n          }\r\n\r\n          // Set the file name\r\n          const fn = `${title.replace(/[/\\\\?%*:|\"<>\\s]/g, '-')}_${section}_${days.replace(/,/g, '')}_${times.replace(/[:-\\s]/g, '')}`\r\n          const ext = '.ics'\r\n\r\n          // Set the filepath\r\n          const fp = `${outputDir}/${fn}${ext}`\r\n\r\n          // Save the file\r\n          await fs.writeFile(fp, val)\r\n\r\n          // Resolve promise with filepath\r\n          return fp\r\n\r\n        })\r\n\r\n        return fp\r\n\r\n      } catch (e) {\r\n        // Reject promise with error\r\n        throw e\r\n      }\r\n    }\r\n\r\n    // Create the ics file for the primary event\r\n    const fp1 = await createAndWriteEvent(instr1, email1, days1, time1)\r\n    debugMessage(`Writing event for ${instr1, email1, days1, time1}`)\r\n    debugMessage('Wrote new ics to disk', fp1)\r\n\r\n    // If days2 and time2 are provided, create the ics for that event\r\n    if (days2 && time2) {\r\n      const fp2 = await createAndWriteEvent(instr1, email1, days2, time2)\r\n      debugMessage(`Writing event for ${instr1, email1, days2, time2}`)\r\n      debugMessage('Wrote new ics to disk', fp2)\r\n    }\r\n\r\n  }\r\n\r\n  // Handle the processed results\r\n  const handleResults = (results) => {\r\n    const rows = results.data.slice(1)\r\n    // Process the rows\r\n    rows.forEach(async row => {\r\n      await processRow(row)\r\n    })\r\n  }\r\n\r\n  // Use the papa to parse the file 🍕\r\n  Papa.parse(file, {\r\n    complete: results => handleResults(results)\r\n  })\r\n\r\n}\r\n\r\nmodule.exports = { parse }"],"names":["RRule","require","fs","promises","Papa","ics","moment","validateArgs","validateRow","daysFromString","timeDiff","firstDayAfterDate","flipName","path","format","suppressDeprecationWarnings","parse","argv","debugMessage","message","verbose","console","debug","JSON","stringify","outputDir","normalize","inputFp","inputFile","file","readFile","processRow","row","isValid","title","subject","course","instr1","instr2","email1","email2","days1","days2","time1","time2","section","createAndWriteEvent","instr","email","days","times","spl","rrule","freq","WEEKLY","byweekday","map","day","SU","MO","TU","WE","TH","FR","SA","filter","until","Date","toDate","firstDay","fromDate","start","split","duration","recurrenceRule","toString","eventTitle","event","description","status","organizer","name","fp","createEvent","err","val","fn","replace","ext","writeFile","e","fp1","fp2","handleResults","results","rows","data","slice","forEach","complete","module","exports"],"mappings":"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"}