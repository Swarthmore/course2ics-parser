#!/usr/bin/env node
const{RRule:e}=require("rrule"),t=require("yargs/yargs"),{hideBin:n}=require("yargs/helpers"),r=require("fs").promises,s=t(n(process.argv)).argv,o=require("papaparse"),a=require("ics"),i=require("moment");i().format();const c=e=>{throw console.error("\nAn error has occurred ðŸ¤•"),new Error(e)};s.docs&&(console.log("\n        NAME\n            course2ics\n            \n        DESCRIPTION\n            Generate an iCalendar (.ics) files from a csv.\n            \n            The following options are available:\n            \n            --input     REQUIRED. The path to the input csv. \n            \n            --from      REQUIRED. The starting date. Must be in ISO format YYYY-MM-DD. \n            \n            --to        REQUIRED. The ending date. Must be in ISO format YYYY-MM-DD.\n\n            --verbose   Run with verbose output.\n        \n            --docs      View the help docs (You're reading them! ðŸš€)\n        \n        \n        CSV FORMAT\n            The input csv MUST be in the following format\n            \n            TITLE, SUBJ, CRSE, INSTR1, INSTR2, INSTR1_EMAIL, INSTR2_EMAIL, DAYS1, DAYS2, TIME1, TIME2\n\n            TITLE           The title of the event\n            SUBJ            The course subject\n            CRSE            The course number\n            INSTR1          The full name of the primary instructor, in the format Last, First\n            INSTR2          The full name of the secondary instructor, in the format Last, First\n                            This field may also be blank\n            INSTR1_EMAIL    The email address of the primary instructor\n            INSTR2_EMAIL    The email address of the secondary instructor\n            DAYS1           A comma delimited set of days when the event happens.\n                            M = Monday, T = Tuesday, W = Wednesday, Th = Thursday, F = Friday, S = Saturday, Su = Sunday\n                            Ex: M,T,W,Th,F\n            DAYS2           A comma delimited set of days when the event happens. This second set is optional.\n            TIME1           The time for when the events defined in DAYS1 occur, in the format of HH-DD (24 hours)\n            TIME2           The time for when the events defined in DAYS2 occur, in the format of HH-DD (24 hours)\n            \n        EXAMPLE USAGE\n            node src/index.js --input=/path/to/input.csv --from=2020-01-01 --to=2020-03-01 \n        \n        CAVEATS\n            Files will be saved to PROJECT_ROOT/output. This means the output folder must be created before usage.\n            \n    "),process.exit()),s.input||c("--input is missing"),s.from||c("--from is missing"),s.to||c("--to is missing");const u=e=>e.split(","),h=e=>{const t=e.split("-");return{from:t[0].trim(),to:t[1].trim()}};(async()=>{await(async t=>{const n=`${__dirname}/${t.input}`,s=await r.readFile(n,"utf8");o.parse(s,{complete:n=>(n=>{n.data.slice(1).forEach(async n=>{await(async([n,s,o,c,l,d,m,f,T,p,E])=>{const w=async(c,l,d,m)=>{try{const f=u(d),T=new e({freq:e.WEEKLY,byweekday:f.map(t=>{switch(t){case"M":return e.MO;case"T":return e.TU;case"W":return e.WE;case"Th":return e.TH;case"F":return e.FR}}).filter(e=>e),until:new Date(t.to)}),p=((e,t,n)=>{try{const[r]=u(t),s=(e=>{switch(e){case"S":return 0;case"M":return 1;case"T":return 2;case"W":return 3;case"Th":return 4;case"F":return 5;case"Sa":return 6;default:throw new Error("Invalid day given")}})(r),{from:o}=h(n),[a,c]=o.split(":"),l=i(e);l.set("hour",a),l.set("minute",c);let d=i(l);do{d=d.add(1,"days")}while(d.day()!==s);return d}catch(e){throw e}})(t.from,d,m).format("YYYY-M-D-H-m").split("-"),E=(e=>{const{from:t,to:n}=h(e),[r,s]=t.split(":"),[o,a]=n.split(":"),i=new Date(2e3,0,1,r,s),c=new Date(2e3,0,1,o,a);return c<i&&c.setDate(c.getDate()+1),(e=>{let t,n,r,s;return s=Math.floor(e/1e3),r=Math.floor(s/60),s%=60,n=Math.floor(r/60),r%=60,t=Math.floor(n/24),n%=24,{days:t,hours:n,minutes:r,seconds:s}})(c-i)})(m),[,w]=T.toString().split("RRULE:");return a.createEvent({start:p,duration:E,recurrenceRule:w,title:`${s}${o}`,description:n,status:"CONFIRMED",organizer:{name:c,email:l}},async(e,t)=>{if(e)throw e;const n="output/"+p.join("-")+"_"+d.replace(/,/g,"")+"_"+m.replace(/[:-\s]/g,"")+"_"+s+"-"+o+".ics";return await r.writeFile(n,t),n})}catch(e){throw e}},S=await w(c,d,f,p);if(console.log("Wrote new ics to disk",S),T&&E){const e=await w(c,d,T,E);console.log("Wrote new ics to disk",e)}})(n)})})(n)})})(s)})();
//# sourceMappingURL=course2ics.modern.js.map
