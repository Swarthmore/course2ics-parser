{"version":3,"file":"course2ics.modern.js","sources":["../src/index.js"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nconst { RRule } = require('rrule')\r\nconst yargs = require('yargs/yargs')\r\nconst { hideBin } = require('yargs/helpers')\r\nconst fs = require('fs').promises\r\nconst argv = yargs(hideBin(process.argv)).argv\r\nconst Papa = require('papaparse')\r\nconst ics = require('ics')\r\nconst moment = require('moment')\r\nconst { validateArgs, validateRow } = require('./validators')\r\nconst { daysFromString, timeDiff, firstDayAfterDate } = require('./helpers')\r\n\r\n// See: https://momentjs.com/docs/#/use-it/node-js/\r\nmoment().format()\r\n\r\n// See: https://github.com/moment/moment/issues/3488\r\nmoment.suppressDeprecationWarnings = true;\r\n\r\n// If --docs was passed as an argument, show the documentation, then end the process\r\nif (argv.docs) {\r\n  console.log(`\r\n        NAME\r\n            course2ics\r\n            \r\n        DESCRIPTION\r\n            Generate an iCalendar (.ics) files from a csv.\r\n            \r\n            The following options are available:\r\n            \r\n            --input     REQUIRED. The path to the input csv. \r\n            \r\n            --from      REQUIRED. The starting date. Must be in ISO format YYYY-MM-DD. \r\n            \r\n            --to        REQUIRED. The ending date. Must be in ISO format YYYY-MM-DD.\r\n\r\n            --verbose   Run with verbose output.\r\n        \r\n            --docs      View the help docs (You're reading them! 🚀)\r\n        \r\n        \r\n        CSV FORMAT\r\n            The input csv MUST be in the following format\r\n            \r\n            TITLE, SUBJ, CRSE, INSTR1, INSTR2, INSTR1_EMAIL, INSTR2_EMAIL, DAYS1, DAYS2, TIME1, TIME2\r\n\r\n            TITLE           The title of the event\r\n            SUBJ            The course subject\r\n            CRSE            The course number\r\n            INSTR1          The full name of the primary instructor, in the format Last, First\r\n            INSTR2          The full name of the secondary instructor, in the format Last, First\r\n                            This field may also be blank\r\n            INSTR1_EMAIL    The email address of the primary instructor\r\n            INSTR2_EMAIL    The email address of the secondary instructor\r\n            DAYS1           A comma delimited set of days when the event happens.\r\n                            M = Monday, T = Tuesday, W = Wednesday, Th = Thursday, F = Friday, S = Saturday, Su = Sunday\r\n                            Ex: M,T,W,Th,F\r\n            DAYS2           A comma delimited set of days when the event happens. This second set is optional.\r\n            TIME1           The time for when the events defined in DAYS1 occur, in the format of HH-DD (24 hours)\r\n            TIME2           The time for when the events defined in DAYS2 occur, in the format of HH-DD (24 hours)\r\n            \r\n        EXAMPLE USAGE\r\n            node src/index.js --input=/path/to/input.csv --from=2020-01-01 --to=2020-03-01 \r\n        \r\n        CAVEATS\r\n            Files will be saved to PROJECT_ROOT/output. This means the output folder must be created before usage.\r\n            \r\n    `)\r\n\r\n  process.exit()\r\n}\r\n\r\n// Output a debug message. This will only work if --verbose is passed to the script\r\nconst debugMessage = (message) => {\r\n  if (!argv.verbose) return\r\n  console.debug(\r\n    typeof message === 'string' ? message : JSON.stringify(message)\r\n  )\r\n}\r\n\r\n/**\r\n * The main function\r\n * @param argv - Arguments - See docs\r\n * @returns {Promise<void>}\r\n */\r\nconst main = async (argv) => {\r\n\r\n  // Validate the arguments\r\n  validateArgs(argv)\r\n\r\n  // Create the file path\r\n  const fp = `${__dirname}/${argv.input}`\r\n\r\n  // Read the CSV\r\n  const file = await fs.readFile(fp, 'utf8')\r\n\r\n  // Handle the processing of a single row of data\r\n  const processRow = async (row) => {\r\n\r\n    // validate the row\r\n    const isValid = validateRow(row)\r\n\r\n    // if the row is not valid, return out of the function \r\n    if (!isValid) {\r\n      return\r\n    }\r\n\r\n    // destructure everything out of the row\r\n    const [title, subject, course, instr1, instr2, email1, email2, days1, days2, time1, time2] = row\r\n\r\n    /**\r\n     * Creates a single ics file\r\n     * @param instr\r\n     * @param email\r\n     * @param days\r\n     * @param times\r\n     * @returns {Promise<*>}\r\n     */\r\n    const createAndWriteEvent = async (instr, email, days, times) => {\r\n      try {\r\n\r\n        const spl = daysFromString(days)\r\n\r\n        const rrule = new RRule({\r\n          freq: RRule.WEEKLY,\r\n          byweekday: spl.map(day => {\r\n            switch (day) {\r\n              case 'U':\r\n                return RRule.SU\r\n              case 'M':\r\n                return RRule.MO\r\n              case 'T':\r\n                return RRule.TU\r\n              case 'W':\r\n                return RRule.WE\r\n              case 'R':\r\n                return RRule.TH\r\n              case 'F':\r\n                return RRule.FR\r\n              case 'S':\r\n                return RRule.SA\r\n              default:\r\n                break\r\n            }\r\n          })\r\n            .filter(day => day),\r\n          until: new Date(argv.to)\r\n        })\r\n\r\n        const firstDay = firstDayAfterDate(argv.from, days, times, moment)\r\n\r\n        if (!firstDay) return\r\n\r\n        const start = firstDay.format('YYYY-M-D-H-m').split(\"-\")\r\n\r\n        const duration = timeDiff(times)\r\n\r\n        // rrule.toString() will include the beginning RRULE:\r\n        // This is not needed with the ics library\r\n        // This line of code splits the returned rrule string at RRULE: and assigns the\r\n        // second part (the part we need) to a variable.\r\n        const [, recurrenceRule] = rrule.toString().split('RRULE:')\r\n\r\n        const eventTitle = `${subject}${course}`\r\n\r\n        const event = {\r\n          // Start is in the format [year, month, day, hour, min]\r\n          start: start,\r\n          duration: duration,\r\n          recurrenceRule: recurrenceRule,\r\n          title: eventTitle,\r\n          description: title,\r\n          status: 'CONFIRMED',\r\n          organizer: {\r\n            name: instr,\r\n            email: email\r\n          }\r\n        }\r\n\r\n        const fp = ics.createEvent(event, async (err, val) => {\r\n\r\n          if (err) {\r\n            throw err\r\n          }\r\n\r\n          // Set the file name\r\n          const fn = start.join('-') + '_' + days.replace(/,/g, '') + '_' + times.replace(/[:-\\s]/g, '') + '_' + subject + '-' + course + '.ics'\r\n\r\n          // Set the filepath\r\n          const fp = `output/${fn}`\r\n\r\n          // Save the file\r\n          await fs.writeFile(fp, val)\r\n\r\n          // Resolve promise with filepath\r\n          return fp\r\n\r\n        })\r\n\r\n        return fp\r\n\r\n      } catch (e) {\r\n        // Reject promise with error\r\n        throw e\r\n      }\r\n    }\r\n\r\n    // Create the ics file for the primary event\r\n    const fp1 = await createAndWriteEvent(instr1, email1, days1, time1)\r\n    debugMessage(`Writing event for ${instr1, email1, days1, time1}`)\r\n    debugMessage('Wrote new ics to disk', fp1)\r\n\r\n    // If days2 and time2 are provided, create the ics for that event\r\n    if (days2 && time2) {\r\n      const fp2 = await createAndWriteEvent(instr1, email1, days2, time2)\r\n      debugMessage(`Writing event for ${instr1, email1, days2, time2}`)\r\n      debugMessage('Wrote new ics to disk', fp2)\r\n    }\r\n\r\n  }\r\n\r\n  // Handle the processed results\r\n  const handleResults = (results) => {\r\n    const rows = results.data.slice(1)\r\n    // Process the rows\r\n    rows.forEach(async row => {\r\n      await processRow(row)\r\n    })\r\n  }\r\n\r\n  // Use the papa to parse the file 🍕\r\n  Papa.parse(file, {\r\n    complete: results => handleResults(results)\r\n  })\r\n\r\n}\r\n\r\n// Run the script\r\n(async () => {\r\n  await main(argv)\r\n  return 0\r\n})()"],"names":["RRule","require","yargs","hideBin","fs","promises","argv","process","Papa","ics","moment","validateArgs","validateRow","daysFromString","timeDiff","firstDayAfterDate","format","suppressDeprecationWarnings","docs","console","log","exit","debugMessage","message","verbose","debug","JSON","stringify","async","fp","__dirname","input","file","readFile","parse","complete","results","data","slice","forEach","row","title","subject","course","instr1","instr2","email1","email2","days1","days2","time1","time2","createAndWriteEvent","instr","email","days","times","spl","rrule","freq","WEEKLY","byweekday","map","day","SU","MO","TU","WE","TH","FR","SA","filter","until","Date","to","firstDay","from","start","split","duration","recurrenceRule","toString","createEvent","description","status","organizer","name","err","val","join","replace","writeFile","e","processRow","handleResults","main"],"mappings":";AAEA,MAAMA,MAAEA,GAAUC,QAAQ,SACpBC,EAAQD,QAAQ,gBAChBE,QAAEA,GAAYF,QAAQ,iBACtBG,EAAKH,QAAQ,MAAMI,SACnBC,EAAOJ,EAAMC,EAAQI,QAAQD,OAAOA,KACpCE,EAAOP,QAAQ,aACfQ,EAAMR,QAAQ,OACdS,EAAST,QAAQ,WACjBU,aAAEA,EAAFC,YAAgBA,GAAgBX,QAAQ,iBACxCY,eAAEA,EAAFC,SAAkBA,EAAlBC,kBAA4BA,GAAsBd,QAAQ,aAGhES,IAASM,SAGTN,EAAOO,6BAA8B,EAGjCX,EAAKY,OACPC,QAAQC,IAAK,wtEAgDbb,QAAQc,QAIV,MAAMC,EAAgBC,IACfjB,EAAKkB,SACVL,QAAQM,MACa,iBAAZF,EAAuBA,EAAUG,KAAKC,UAAUJ,KAkK3D,gBAzJaK,OAAAA,IAGXjB,EAAaL,GAGb,MAAMuB,EAAM,GAAEC,aAAaxB,EAAKyB,QAG1BC,QAAa5B,EAAG6B,SAASJ,EAAI,QAyInCrB,EAAK0B,MAAMF,EAAM,CACfG,SAAUC,GAVWA,CAAAA,IACRA,EAAQC,KAAKC,MAAM,GAE3BC,QAAQX,MAAAA,SAhIIA,OAAAA,IAMjB,IAHgBhB,EAAY4B,GAI1B,OAIF,MAAOC,EAAOC,EAASC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAOC,EAAOC,EAAOC,GAASX,EAUvFY,EAAsBxB,MAAOyB,EAAOC,EAAOC,EAAMC,KACrD,IAEE,MAAMC,EAAM5C,EAAe0C,GAErBG,EAAQ,IAAI1D,EAAM,CACtB2D,KAAM3D,EAAM4D,OACZC,UAAWJ,EAAIK,IAAIC,IACjB,OAAQA,GACN,IAAK,IACH,OAAO/D,EAAMgE,GACf,IAAK,IACH,OAAOhE,EAAMiE,GACf,IAAK,IACH,OAAOjE,EAAMkE,GACf,IAAK,IACH,OAAOlE,EAAMmE,GACf,IAAK,IACH,OAAOnE,EAAMoE,GACf,IAAK,IACH,OAAOpE,EAAMqE,GACf,IAAK,IACH,OAAOrE,EAAMsE,MAKhBC,OAAOR,GAAOA,GACjBS,MAAO,IAAIC,KAAKnE,EAAKoE,MAGjBC,EAAW5D,EAAkBT,EAAKsE,KAAMrB,EAAMC,EAAO9C,GAE3D,IAAKiE,EAAU,OAEf,MAAME,EAAQF,EAAS3D,OAAO,gBAAgB8D,MAAM,KAE9CC,EAAWjE,EAAS0C,KAMjBwB,GAAkBtB,EAAMuB,WAAWH,MAAM,UAsClD,OApBWrE,EAAIyE,YAdD,CAEZL,MAAOA,EACPE,SAAUA,EACVC,eAAgBA,EAChBvC,MAPkB,GAAEC,IAAUC,IAQ9BwC,YAAa1C,EACb2C,OAAQ,YACRC,UAAW,CACTC,KAAMjC,EACNC,MAAOA,IAIuB1B,MAAO2D,EAAKC,KAE5C,GAAID,EACF,MAAMA,EAIR,MAGM1D,EAAM,UAHDgD,EAAMY,KAAK,KAAO,IAAMlC,EAAKmC,QAAQ,KAAM,IAAM,IAAMlC,EAAMkC,QAAQ,UAAW,IAAM,IAAMhD,EAAU,IAAMC,EAAS,OAShI,aAHMvC,EAAGuF,UAAU9D,EAAI2D,GAGhB3D,IAMT,MAAO+D,GAEP,MAAMA,UAKQxC,EAAoBR,EAAQE,EAAQE,EAAOE,GAC7D5B,EAAc,wBACdA,EAAa,yBAGT2B,GAASE,UACOC,EAAoBR,EAAQE,EAAQG,EAAOE,GAC7D7B,EAAc,wBACdA,EAAa,2BAUPuE,CAAWrD,MAMEsD,CAAc1D,MAO/B2D,CAAKzF,IADb"}