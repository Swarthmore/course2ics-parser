{"version":3,"file":"validators.modern.js","sources":["../src/validators.js"],"sourcesContent":["/**\n * Validates script arguments. It will throw an error if a required argument is not provided.\n * @param {*} argv \n * @returns {Promise<*>} - Returns a promise that resolves in the provided arguments\n */\nexports.validateArgs = (argv) => new Promise((resolve, reject) => {\n\n  if (!argv.inputFile) {\n    reject('--input is missing')\n  }\n\n  if (!argv.fromDate) {\n    reject('--from is missing')\n  }\n\n  if (!argv.toDate) {\n    reject('--to is missing')\n  }\n\n  if (!argv.outputDir) {\n    reject('--output is missing')\n  }\n\n  resolve(argv)\n\n}) \n\n/**\n * Validates row data\n * @param {string[]} row - The row to validate\n * @returns {Promise<string[]>} - Returns a promise that resolves with the provided row\n */\nexports.validateRow = (row) => new Promise((resolve, reject) => {\n\n  const [title, subject, course, instr1, instr2, email1, email2, days1, days2, time1, time2, section] = row\n\n  if (!title) {\n    reject('Title is missing')\n  }\n\n  if (!email1) {\n    reject('Email1 is missing')\n  }\n\n  if (!days1) {\n    reject('Days1 is missing')\n  }\n\n  if (!time1) {\n    reject('Time1 is missing')\n  }\n\n  if (!section) {\n    reject('Section is missing')\n  }\n\n  resolve(row)\n\n})"],"names":["exports","validateArgs","argv","Promise","resolve","reject","inputFile","fromDate","toDate","outputDir","validateRow","row","title","subject","course","instr1","instr2","email1","email2","days1","days2","time1","time2","section"],"mappings":"AAKAA,QAAQC,aAAgBC,GAAS,IAAIC,QAAQ,CAACC,EAASC,KAEhDH,EAAKI,WACRD,EAAO,sBAGJH,EAAKK,UACRF,EAAO,qBAGJH,EAAKM,QACRH,EAAO,mBAGJH,EAAKO,WACRJ,EAAO,uBAGTD,EAAQF,KASVF,QAAQU,YAAeC,GAAQ,IAAIR,QAAQ,CAACC,EAASC,KAEnD,MAAOO,EAAOC,EAASC,EAAQC,EAAQC,EAAQC,EAAQC,EAAQC,EAAOC,EAAOC,EAAOC,EAAOC,GAAWZ,EAEjGC,GACHP,EAAO,oBAGJY,GACHZ,EAAO,qBAGJc,GACHd,EAAO,oBAGJgB,GACHhB,EAAO,oBAGJkB,GACHlB,EAAO,sBAGTD,EAAQO"}